// mcos is a game server, written from scratch, for an old game
// Copyright (C) <2017>  <Drazi Crendraven>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

import http from "node:http";
import { CastanetResponse } from "./CastanetResponse.js";
import { generateShardList } from "rusty-motors-shard";
import {
	handleGetCert,
	handleGetKey,
	handleGetRegistry,
} from "rusty-motors-shard";
import { getServerConfiguration, getServerLogger } from "rusty-motors-shared";
import { findUser } from "rusty-motors-database";

type WebHandlerResponse = {
	headers: Record<string, string>;
	body: string | Buffer;
};

type WebHandler = (request: http.IncomingMessage, response: http.ServerResponse) => Promise<WebHandlerResponse>;

class AuthLoginResponse {
	valid: boolean = false;
	ticket: string = "";
	reasonCode: string = "";
	reasonText: string = "";
	reasonUrl: string = "";

	static createValid(ticket: string) {
		const response = new AuthLoginResponse();
		response.valid = true;
		response.ticket = ticket;
		return response;
	}

	static createInvalid(
		reasonCode: string,
		reasonText: string,
		reasonUrl: string,
	) {
		const response = new AuthLoginResponse();
		response.valid = false;
		response.reasonCode = reasonCode;
		response.reasonText = reasonText;
		response.reasonUrl = reasonUrl;
		return response;
	}

	formatResponse() {
		if (this.valid) {
			return `Valid=TRUE\nTicket=${this.ticket}`;
		} else {
			return `reasoncode=${this.reasonCode}\nreasontext=${this.reasonText}\nreasonurl=${this.reasonUrl}`;
		}
	}
}


const routeHandlers: Map<string, WebHandler> = new Map();

export function initializeRouteHandlers() {
	routeHandlers.set("/", handleRoot);
	routeHandlers.set("/games/EA_Seattle/MotorCity/UpdateInfo", handleCastanet);
	routeHandlers.set("/games/EA_Seattle/MotorCity/NPS", handleCastanet);
	routeHandlers.set("/games/EA_Seattle/MotorCity/MCO", handleCastanet);
	routeHandlers.set("/AuthLogin", handleAuthLogin);
	routeHandlers.set("/urls", handleWebUrl);
	routeHandlers.set("/ShardList/", handleShardList);
	routeHandlers.set("/ticker", handleTicker);
	routeHandlers.set("/cert", async () => {
		return {
			headers: { "Content-Type": "octet-stream", "Content-Disposition": "attachment; filename=server.crt" },
			body: handleGetCert(getServerConfiguration()),
		};
	});
	routeHandlers.set("/key", async () => {
		return {
			headers: { "Content-Type": "octet-stream", "Content-Disposition": "attachment; filename=pub.key" },
			body: handleGetKey(getServerConfiguration()),
		};
	});
	routeHandlers.set("/registry", async () => {
		return {
			headers: { "Content-Type": "octet-stream", "Content-Disposition": "attachment; filename=server.reg" },
			body: handleGetRegistry(getServerConfiguration()),
		};
	});
}

/**
 * Handles the root path request.
 *
 * @returns The response headers and body for the root path request.
 */
async function handleRoot(): Promise<WebHandlerResponse> {
	return {
		headers: { "Content-Type": "text/plain" },
		body: "Hello, world!",
	};
}

/**
 * Handles Castanet routes.
 *
 * @returns The response headers and body for Castanet routes.
 */
async function handleCastanet(): Promise<WebHandlerResponse> {
	return {
		headers: {
			[CastanetResponse.header.type]: CastanetResponse.header.value,
		},
		body: CastanetResponse.body,
	};
}

/**
 * Handles the ticker request.
 *
 * @returns The response headers and body for the ticker request.
 */
async function handleTicker(): Promise<WebHandlerResponse> {
	return {
		headers: { "Content-Type": "text/plain" },
		body: `/color=0xFFFF00
		Hi Mark!`
	};
}



/**
 * Handles the authentication login process.
 *
 * This function processes an incoming HTTP request to handle user login authentication.
 * It retrieves the username from the request URL, checks if the user exists, and responds
 * with an appropriate authentication response.
 *
 * @param request - The incoming HTTP request object.
 * @param response - The HTTP response object to send the authentication response.
 */
async function handleAuthLogin(
	request: http.IncomingMessage,
	response: http.ServerResponse,
): Promise<WebHandlerResponse> {
	const url = new URL(
		`http://${process.env["HOST"] ?? "localhost"}${request.url}`,
	);
	const username = url.searchParams.get("username") ?? "";
	const password = url.searchParams.get("password") ?? "";

	response.setHeader("Content-Type", "text/plain");
	let authResponse: AuthLoginResponse;
	authResponse = AuthLoginResponse.createInvalid(
		"INV-100",
		"Opps!",
		"https://winehq.com",
	);

	const user = await findUser(username, password);

	if (user !== null) {
		const ticket = generateTicket(user.customerId);
		if (ticket !== "") {
			authResponse = AuthLoginResponse.createValid(ticket);
		}
	}

	return {
		headers: { "Content-Type": "text/plain" },
		body: authResponse.formatResponse(),
	}


}

/**
 * Handles the shard list request.
 *
 * @returns The response headers and body for the shard list request.
 */
async function handleShardList(): Promise<WebHandlerResponse> {
	const shardList = generateShardList(getServerConfiguration().host);
	return {
		headers: { "Content-Type": "text/plain" },
		body: shardList,
	};
}

/**
 *
 * @param request - The incoming HTTP request object.
 * @param response - The HTTP response object to send to the client.
 */
async function handleWebUrl(
	request: http.IncomingMessage,
	response: http.ServerResponse,
): Promise<WebHandlerResponse> {
	const url = new URL(
		`http://${process.env["HOST"] ?? "localhost"}${request.url}`,
	);
	const id = url.searchParams.get("id") ?? "";

	let urlResponse = `Hello, number ${id}!`

	if (urlResponse === null) {
		response.statusCode = 404;
		response.end("Not found");
		return {
			headers: { "Content-Type": "text/plain" },
			body: 'Not found'
		}
	}

	getServerLogger("gateway.web/getWebURL").debug(`Request for url # ${id}`)

	if (id === '58') {
		urlResponse = `101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
153
159
171
173
174
175
176
177
178
179
180
184
190
208
236
320
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
377
378
379
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
1001
2001
4001
5001
6001
10001
10002
10003
10004
10005
10006
10007
10008
10009
10010
10011
10012
10013
10014
10015
10016
10017
10018
10019
10020
10021
10022
10023
10024
10025
10026
10027
10028
10029
10030
10031
10032
10033
10034
10035
10036
10037
10038
10039
10040
10041
10042
10043
10044
11001
11002
11003
11004
11005
11006
11007
11008
11009
11010
11011
11012
11013
12001
12002
12003
12004
12005
12006
12007
12008
12009
12010
12011
12012
12013
12014
12015
12016
12017
12018
12019
12020
12021
12022
12023
12024
12025
12026
12027
12028
12029
12030
12031
12032
12033
12034
12035
12036
12037
12038
12039
12040
12041
12042
12043
12044
12045
12046
12047
12048
12049
12050
12051
12052
12053
12054
12055
12056
12057
12058
12059
12060
12061
12062
12063
12064
12065
12066
12067
12068
12069
13001
13002
13003
13004
13005
13006
13007
13008
13009
13010
13011
13012
13013
13014
13015
13016
13017
13018
13019
13020
13021
13022
13023
13024
13025
14001
14002
14003
14004
14005
15001
16001
17001
18001
18002
18003
18004
20101
20102
20103
20104
20105
20106
20107
20108
20109
20110
20111
20112
20113
20114
20115
20116
20117
20118
20119
20120
20121
20122
20123
20124
20125
20126
20127
20128
20129
20130
20131
20132
20133
20134
20135
20138
20140
20146
20147
20148
20149
20150
20151
20152
20153
20157
20207
20210
20211
20212
20213
20214
20215
20216
20217
20218
20219
20220
20221
20222
20223
20224
20225
20226
20227
20228
21001
21002
21003
21004
21005
21006
21007
21008
21009
21010
21011
21012
21013
21014
21015
21016
22001
22002
22003
22004
22005
22006
22007
22008
22009
22010
22011
22012
22013
22014
22015
22016
22017
22018
22019
22020
22021
22022
22023
23001
23002
23003
23004
23005
23006
23007
23008
23009
23010
23011
23012
23013
25001
25002
25003
25004
25005
25006
25007
25008
25009
25010
25011
25012
25013
25014
25015
25016
25017
25018
25019
25020
25021
25022
26001
27003
28001
28002
28003
28004
28005
29001
29002
29003
29004
29005
29006
29007
29008
29009
29010
30001
30002
30003
30004
30005
30006
30007
30008
30009
30010
31150
31151
31152
31153
32001
33001
34001
34002
35001
35002
35003
36001
36002
36003
36004
36005
36006
36007
36008
36009
36010
36011
36012
36013
36014
36015
36016
36017
36018
36019
36020
36021
36022
36023
36024
36025
36026
36027
36028
36029
36030
36031
36032
36033
36034
36035
36036
36037
36038
36039
36040
36041
36042
36043
36044
36045
36046
36047
36048
36049
36050
36051
36052
36053
36054
36055
36056
36057
36058
36059
36060
36061
36062
36063
36064
36065
36066
36067
36068
36069
36070
36071
36072
36073
36074
36075
36076
36077
36078
36079
36080
36081
36082
36083
36084
36085
36086
36087
36088
36089
36090
36091
36092
36093
36094
36095
36096
36097
36098
36099
36100
36101
36102
36103
36104
36105
36106
36107
36108
36109
36110
36111
36112
36113
36114
36115
36116
36117
36118
36119
36120
36121
36122
36123
36124
36125
36126
36127
36128
36129
36130
36131
36132
36133
36134
36135
36136
36137
36138
36139
36140
36141
36142
36143
36144
36145
36146
36147
36148
36149
36150
36151
36152
36153
36154
36155
36156
36157
36158
36159
36160
36161
36162
36163
36164
36165
36166
36167
36168
36169
36170
36171
36172
36173
36174
36175
36176
36177
36178
36179
36180
36181
36182
36183
36184
36185
36186
36187
36188
36189
36190
36191
36192
36193
36194
36195
36196
36197
36198
36199
36200
36201
36202
36203
36204
36205
36206
36207
36208
36209
36210
36211
36212
36213
36214
36215
37001
39001
40001
40002
40003
40004
40005
40006
40007
40008
40009
40010
40011
40012
40013
40014
40015
40016
40017
40018
40019
40020
40021
40022
40023
40024
40025
40026
40027
40028
40029
40030
40031
40032
40033
40034
40035
40036
40037
40038
40039
40040
40041
40042
40043
40044
40045
40046
40047
40048
40049
40050
40051
40052
40053
40054
40055
40056
40057
40058
40059
40060
40061
40062
100001
100002
100003
100004
100005
100006
100007
100008
100009
100010
100011
100012
100013
100014
100015
100016
100017
100018
100019
100020
100021
100022
100023
100024
100025
100026
100027
100028
100029
100030
100031
100032
100033
100034
100035
100036
100037
100038
100039
100040
100041
100042
100043
100044
100045
100046
100047
100048
100049
100050
100051
100052
100053
100054
100055
100056
100057
100058
100059
100060
100061
100062
100063
100064
100065
100066
100067
100068
100069
100070
100071
100072
100073
100074
100075
100076
100077
100078
100079
100080
100081
100082
100083
100084
100085
100086
100087
100088
100089
100090
100091
100092
100093
100094
100095
100096
100097
100098
100099
100100
100101
100102
100103
100104
100105
100106
100107
100108
100109
100110
100111
100112
100113
100114
100115
100116
100117
100118
100119
100120
100121
100122
100123
100124
100125
100126
100127
100128
100129
100130
100131
100132
100133
100134
100135
100136
100137
100138
100139
100140
100141
100142
100143
100144
100145
110001
110002
110003
110004
110005
110006
110007
110008
110009
110010
110011
110012
110013
110014
110015
110016
110017
110018
110019
110020
110021
110022
110023
110024
110025
110026
110027
110028
110029
110030
110031
110032
110033
110034
110035
110036
110037
110038
110039
110040
110041
110042
110043
110044
110045
110046
110047
110048
110049
110050
110051
110052
110053
110054
110055
110056
110057
110058
110059
110060
110061
110062
110063
110064
110065
110066
110067
110068
110069
110070
110071
110072
110073
110074
110075
110076
110077
110078
110079
110080
110081
110082
110083
110084
110085
110086
110087
110088
110089
110090
110091
110092
110093
110094
110095
110096
110097
110098
110099
110100
110101
110102
110103
110104
110105
110106
110107
110108
110109
110110
110111
110112
110113
110114
110115
110116
110117
110118
110119
110120
110121
110122
110123
110124
110125
110126
110127
110128
110129
110130
110131
110132
110133
110134
110135
110136
110137
110138
110139
110140
110141
110142
110143
110144
110145
110146
110147
110148
110149
110150
110151
110152
110153
110154
110155
110156
110157
110158
110159
110160
110161
110162
110163
110164
110165
110166
110167
110168
110169
110170
110171
110172
110173
110174
110175
110176
110177
110178
110179
110180
110181
110182
110183
110184
110185
110186
110187
110188
110189
110190
110191
110192
110193
110194
110195
110196
110197
110198
110199
110200
110201
110202
130001
130002
130003
130004
130005
130006
130007
130008
130009
130010
130011
130012
130013
130014
130015
130016
130017
130018
130019
130020
130021
130022
130023
130024
130025
130026
130027
130028
130029
130030
130031
130032
130033
130034
130035
130036
130037
130038
130039
130040
130041
130042
130043
130044
130045
130046
130047
130048
130049
130050
130051
130052
130053
130054
130055
130056
130057
140001
140002
140003
140004
140005
140006
140007
140008
140009
140010
140011
140012
140013
140014
140015
140016
140017
140018
140019
140020
140021
140022
140023
140024
140025
140026
140027
140028
140029
140030
140031
140032
140033
140034
140035
140036
140037
140038
140039
140040
140041
140042
140043
140044
140045
140046
140047
140048
140049
140050
140051
140052
150001
150002
150003
150004
160001
160002
160003
160004
160005
160006
160007
160008
160009
160010
160011
160012
160013
160014
160015
160016
160017
160018
160019
160020
160021
160022
160023
160024
160025
160026
160027
160028
160029
160030
160031
160032
160033
160034
160035
160036
160037
160038
160039
160040
160041
160042
160043
160044
160046
160047
160048
160049
160050
160054
160055
160056
160057
160069
160070
160072
160073
160074
160075
160076
160077
160078
160079
160080
160081
160082
160083
160084
160085
160086
160087
160088
160089
160090
160091
160092
160093
160094
160095
160096
160097
160098
180001
180002
180003
180004
180005
180006
180007
180008
180009
180010
180011
180012
180013
180014
180015
180016
180017
180018
180019
180020
180021
180022
180023
180024
180025
180026
180027
180028
180029
180030
180031
180032
180033
180034
180035
180036
180037
180038
180039
180040
180041
180042
180043
180044
180045
180046
180047
180048
180049
180050
180051
180052
180053
180054
180055
180056
180057
180058
180059
180060
180061
180062
180063
180064
180065
180066
180067
180068
180069
180070
180071
180072
180073
180074
180075
180076
180077
180078
180079
180080
180081
180082
180083
180084
180085
180086
180087
180088
180089
180090
180091
180092
180093
180094
180095
180096
180097
180098
180099
180100
180101
180102
180103
180104
180105
180106
180107
180108
180109
180110
180111
180112
180113
180114
180115
180116
180117
180118
180119
180120
180121
180122
180123
180124
180125
180126
180127
180128
180129
180130
180131
180132
180133
180134
180135
180136
180137
180138
180139
180140
180141
180142
180143
180144
180145
180146
180147
180148
180149
180150
180151
180152
180153
180154
180155
180156
180157
180158
180159
180160
180161
180162
180163
180164
180165
180166
180167
180168
180169
180170
180171
180172
180173
180174
180175
180176
180177
180178
190001
190002
190003
190004
190005
190006
190007
190008
190009
190010
190011
190012
190013
190014
190015
190016
190017
190018
190019
190020
190021
190022
190023
190024
190025
190026
190027
190028
190029
190030
190031
190032
190033
190034
190035
190036
190037
190038
190039
190040
190041
190042
190043
190044
190045
190046
190047
190048
190049
190050
190051
190052
190053
190054
190055
190056
190057
190058
190059
190060
190061
190062
190063
190064
190065
190066
190067
190068
190069
190070
190071
190072
190073
190074
190075
190076
190077
190078
190079
190080
190081
190082
190083
190084
190085
190086
190087
190088
190089
190090
190091
190092
190093
190094
190095
190096
190097
190098
190099
190100
190101
190102
190103
190104
190105
190106
190107
190108
190109
190110
190111
190112
190113
190114
190115
190116
190117
190118
190119
190120
190121
190122
190123
190124
190125
190126
190127
190128
190129
190130
190131
190132
190133
190134
190135
190136
190137
190138
190139
190140
190141
190142
190143
190144
190145
190146
190147
190148
190149
190150
190151
190152
190153
190154
190155
190156
190157
190158
190159
190160
190161
190162
190163
190164
190165
190166
190167
190168
190169
190170
190171
190172
190173
190174
190175
190176
200001
200002
200003
200004
200005
200006
200007
200008
200009
200010
200011
200012
200013
200014
200015
200016
200017
200018
200019
200020
200021
200022
200023
200024
200025
200026
200027
200028
200029
200030
200031
200032
200033
200034
200035
200036
200037
200038
200039
200040
200041
200042
200043
200044
200045
200046
200047
200048
200049
200050
200051
200052
200053
200054
200055
200056
200057
200058
200059
200060
200061
200062
200063
200064
200065
200066
200067
200068
200069
200070
200071
200072
200073
200074
200075
200076
200077
200078
200079
200080
200081
200082
200083
200084
200085
200086
200087
200088
200089
200090
200091
200092
200093
200094
200095
200096
200097
200098
200099
200100
200101
200102
200103
200104
200105
200106
200107
200108
200109
200110
200111
200112
200113
200114
200115
200116
200117
200118
200119
200120
200121
200122
200123
200124
200125
200126
200127
200128
200129
200130
200131
200132
200133
200134
200135
200136
200137
200138
200139
200140
200141
200142
200143
200144
200145
200146
200147
200148
200149
200150
200151
200152
200153
200154
200155
200156
200157
200158
200159
200160
200161
200162
200163
200164
200165
200166
200167
200168
200169
200170
200171
200172
200173
200174
200175
200176
200177
200178
200179
200180
200181
200182
200183
200184
200185
200186
200187
200188
200189
200190
200191
200192
200193
200194
200195
200196
200197
200198
200199
200200
200201
200202
200203
200204
200205
200206
200207
200208
200209
200210
200211
200212
200213
200214
200215
200216
200217
200218
200219
200220
200221
200222
200223
200224
200225
200226
200227
200228
200229
200230
200231
200232
200233
200234
200235
200236
200237
200238
200239
200240
200241
200242
200243
200244
200245
200246
200247
200248
200249
200250
200251
200252
200253
200254
200255
200256
200257
200258
200259
200260
200261
200262
200263
200264
200265
200266
200267
200268
200269
200270
200271
200272
200273
200274
200275
200276
200277
200278
200279
200280
200281
200282
200283
200284
200285
200286
200287
200288
200289
200290
200291
200292
230001
230002
230003
230004
230005
230006
230007
230008
230009
230010
230011
230012
230013
230014
230015
230016
230017
230018
230019
230020
230021
230022
230023
230024
230025
230026
230027
230028
230029
230030
230031
230032
230033
230034
230035
230036
230037
240001
240002
240003
240004
240005
240006
240007
240008
240009
240010
240011
240012
240013
240014
240015
240016
240017
240018
240019
240020
240021
240022
240023
240024
240025
240026
240027
240028
240029
240030
240031
240032
240033
250001
250002
250003
250004
250005
250006
250007
250008
250009
250010
250011
250012
250013
250014
250015
250016
250017
250018
250019
250020
250021
250022
250023
250024
250025
250026
250027
250028
250029
250030
280001
280002
280003
280004
280005
280006
280007
280008
280009
280010
280011
280012
280013
280014
280015
280016
280017
280018
280019
280020
280021
280022
280023
280024
280025
280026
280027
280028
280029
280030
280031
280032
280033
280034
280035
280036
280037
280038
280039
280040
280041
280042
280043
280044
280045
280046
280047
280048
280049
280050
280051
280052
280053
280054
280055
280056
280057
280058
280059
280060
280061
280062
280063
280064
280065
280066
280067
280068
280069
280070
280071
280072
280073
280074
280075
280076
280077
280078
280079
280080
280081
280082
280083
280084
280085
280086
280087
280088
280089
280090
280091
280092
280093
280094
280095
280096
280097
280098
280099
280100
280101
280102
280103
280104
280105
280106
280107
280108
280109
280110
280111
280112
280113
280114
280115
280116
280117
280118
280119
280120
280121
280122
280123
280124
280125
280126
280127
280128
280129
280130
280131
280132
280133
280134
280135
280136
280137
280138
280139
280140
280141
280142
280143
280144
280145
280146
280147
280148
280149
280150
280151
280152
280153
280154
280155
280156
280157
280158
280159
280160
280161
280162
280163
280164
280165
280166
280167
280168
280169
280170
280171
280172
280173
280174
280175
280176
280177
280178
280179
280180
280181
280182
280183
280184
280185
290001
290002
290003
290004
290005
290006
290007
290008
290009
290010
290011
290012
290013
290014
290015
290016
290017
290018
290019
290020
290021
290022
290023
290024
290025
290026
290027
290028
290029
290030
290031
290032
290033
290034
290035
290036
290037
290038
300001
300002
300003
300004
300005
300006
300007
300008
300009
300010
300011
310001
310002
310003
310004
310005
310006
310007
310008
310009
310010
310011
310012
310013
310014
310015
310016
310017
310018
310019
310020
310021
310022
310023
310024
310025
310026
310027
310028
310029
320001
320002
320003
320004
320005
320006
320007
320008
320009
320010
320011
320012
320013
320014
320015
320016
320017
320018
320019
320020
320021
320022
320023
320024
320025
320026
320027
320028
320029
320030
320031
320032
320033
320034
320035
320036
320037
320038
320039
320040
320041
320042
320043
320044
320045
320046
320047
320048
320049
320050
320051
320052
320053
320054
320055
320056
320057
320058
320059
320060
320061
320062
320063
320064
320065
320066
320067
320068
320069
320070
320071
320072
320073
320074
320075
320076
320077
320078
320079
320080
320081
320082
320083
320084
320085
320086
320087
320088
320089
320090
320091
320092
320093
320094
320095
320096
320097
320098
320099
320100
320101
320102
320103
320104
320105
320106
320107
320108
320109
320110
320111
320112
320113
320114
320115
320116
320117
320118
320119
320120
320121
320122
320123
320124
320125
320126
320127
320128
320129
320130
320131
320132
320133
320134
320135
320136
320137
320138
320139
320140
320141
320142
320143
320144
320145
320146
320147
320148
320149
320150
320151
320152
320153
320154
320155
320156
320157
320158
320159
320160
320161
320162
320163
320164
320165
320166
320167
320168
320169
320170
320171
320172
320173
320174
320175
320176
320177
320178
320179
320180
320181
320182
320183
320184
320185
320186
320187
320188
320189
320190
320191
320192
320193
320194
320195
320196
320197
320198
320199
320200
320201
320202
320203
320204
320205
320206
320207
320208
320209
320210
320211
320212
320213
320214
320215
320216
320217
320218
320219
320220
320221
320222
320223
320224
320225
320226
320227
320228
320229
320230
320231
320232
320233
320234
320235
320236
320237
320238
320239
320240
320241
320242
320243
320244
320245
320246
320247
320248
320249
320250
320251
320252
320253
320254
320255
320256
320257
320258
320259
320260
320261
320262
320263
320264
320265
320266
330001
330002
330003
330004
330005
330006
330007
330008
330009
330010
330011
330012
330013
330014
330015
330016
330017
330018
330019
330020
330021
330022
330023
330024
330025
330026
330027
330028
330029
330030
330031
330032
330033
330034
330035
330036
330037
330038
330039
330040
330041
330042
330043
330044
330045
330046
330047
330048
330049
330050
330051
330052
330053
330054
330055
330056
330057
330058
330059
330060
330061
330062
330063
330064
330065
330066
330067
330068
330069
330070
330071
330072
330073
340001
340002
340003
340004
340005
340006
340007
340008
340009
340010
340011
350001
350002
350003
350004
350005
350006
350007
350008
360001
360002
360003
360004
360005
360006
1000001
1000002
1000003
1000004
1000005
1000006
1000007
1000008
1000009
1000010
1000011
1000012
1000013
1000014
1000015
1000016
1000017
1000018
1000019
1000020
1000021
1000022
1000023
1000024
1000025
1000026
1000027
1000028
1000029
1000030
1000031
1000032
1000033
1000034
1000035
1000037
1000038
1000039
1000040
1000041
1000042
1000043
1000044
1000045
1000046
1000047
1000048
1000049
1000050
1000051
1000052
1000053
1000054
1000055
1000057
1000058
1000060
1000061
1000063
1000064
1000065
1000066
1000067
1000068
1000069
1000070
1000071
1000072
1000073
1000074
1000075
1000076
1000077
1000078
1000079
1000080
1000081
1000082
1000083
1000084
1000085
1000086
1000087
1000088
1000089
1000090
1000091
1000092
1000093
1000094
1000095
1000096
1000097
1000098
1000099
1000100
1000101
1000102
1000103
1000104
1000105
1000106
1000107
1000108
1000109
1000110
1000112
1000113
1000114
1000115
1000116
1000117
1000118
1000119
1000120
1000121
1000122
1000123
1000124
1000125
1000126
1000127
1000128
1000129
1000130
1000131
1000132
1000133
1000134
1000135
1000136
1000137
1000138
1000139
1000140
1000141
1000142
1000143
1000144
1000145
1000146
1000147
1000148
1000149
1000150
1000151
1000152
1000153
1000154
1000155
1000156
1000157
1000158
1000159
1000160
1000161
1000162
1000163
1000164
1000165
1000166
1000167
1000168
1000169
1000170
1000171
1000172
1000173
1000174
1000175
1000176
1100001
1100002
1100003
1100004
1100005
1100006
1100007
1100008
1100009
1100010
1100011
1100012
1100013
1100014
1100015
1100016
1100017
1100018
1100019
1100020
1100021
1100022
1100023
1100024
1100025
1100026
1100027
1100028
1100029
1100030
1100031
1100032
1100033
1100034
1100035
1100036
1100037
1100038
1100039
1100040
1100041
1100042
1100043
1100044
1100045
1100046
1100047
1100048
1100049
1100050
1100052
1100053
1100054
1100055
1100056
1100057
1100058
1100059
1100060
1100061
1100062
1100063
1100064
1100065
1100066
1100067
1100068
1100069
1100070
1100071
1100072
1100073
1100074
1100075
1100076
1100077
1100078
1100079
1100080
1100081
1100082
1100083
1100085
1100086
1100088
1100090
1100091
1100092
1100093
1100096
1100098
1100099
1100100
1100101
1100102
1100103
1100104
1100105
1100106
1100107
1100108
1100109
1100110
1100111
1100112
1100113
1100114
1100115
1100116
1100117
1100118
1100119
1100120
1100121
1100122
1100123
1100124
1100125
1100126
1100127
1100128
1100129
1100130
1100131
1100132
1100133
1100134
1100135
1100136
1100137
1100138
1100139
1100140
1100141
1100142
1100143
1100144
1100145
1100146
1100147
1100148
1100149
1100150
1100151
1100152
1100153
1100154
1100155
1100156
1100157
1100158
1100159
1200001
1200002
1200003
1200004
1200005
1200006
1200007
1200008
1200009
1200010
1200011
1200012
1200013
1200014
1200015
1200017
1200018
1200019
1200020
1200021
1200022
1200023
1200024
1200025
1200026
1200027
1200028
1200029
1200030
1200031
1200032
1200033
1200034
1200035
1200036
1200037
1200038
1200039
1200040
1200041
1200042
1200043
1200044
1200045
1200046
1200047
1200048
1200049
1200050
1200051
1200052
1200053
1200054
1200055
1200056
1200057
1200058
1200059
1200060
1200061
1200062
1200063
1200064
1200065
1200066
1200067
1200068
1200069
1200070
1200071
1200072
1200073
1200074
1200075
1200076
1200077
1200078
1200079
1200080
1200081
1200082
1200083
1200084
1200085
1200086
1200087
1200088
1200089
1200090
1200091
1200092
1200093
1200094
1200095
1200096
1200097
1200098
1200099
1200100
1200101
1200102
1200103
1200104
1200105
1200106
1200107
1200108
1200109
1200110
1200111
1200112
1200113
1200114
1200115
1200116
1200117
1200118
1200119
1200120
1200121
1200122
1200123
1200124
1200125
1200126
1200127
1200128
1200129
1200130
1200131
1200132
1200133
1200134
1200135
1200136
1200137
1200138
1200139
1200140
1200141
1200142
1200143
1200144
1200145
1200146
1200147
1200148
1200149
1200150
1200151
1200152
1200153
1200154
1200155
1200156
1200157
1200158
1200159
1200160
1200161
1200162
1200163
1200164
1200165
1200166
1200167
1200168
1200169
1200170
1200171
1200172
1200173
1200174
1200175
1200176
1200177
1200178
1200179
1200180
1200181
1200182
1200183
1200184
1200185
1200186
1200187
1200188
1200189
1200190
1200191
1200192
`
	}

	return {
		headers: { "Content-Type": "text/plain" },
		body: urlResponse
	}
}




/**
 * Handles incoming HTTP requests and sends appropriate responses based on the request URL.
 *
 * @param request - The incoming HTTP request object.
 * @param response - The HTTP response object to send data back to the client.
 *
 * The function processes the following routes:
 * - `/`: Responds with "Hello, world!".
 * - `/games/EA_Seattle/MotorCity/UpdateInfo`, `/games/EA_Seattle/MotorCity/NPS`, `/games/EA_Seattle/MotorCity/MCO`: Responds with predefined Castanet response headers and body.
 * - `/AuthLogin`: Calls `handleAuthLogin` to process authentication login.
 * - `/ShardList/`: Responds with a generated shard list based on server configuration.
 * - `/cert`: Responds with a certificate based on server configuration.
 * - `/key`: Responds with a key based on server configuration.
 * - `/registry`: Responds with registry information based on server configuration.
 * - Any other route: Responds with a 404 status code and "Not found" message.
 */
export async function processHttpRequest(
	request: http.IncomingMessage,
	response: http.ServerResponse,
) {

	const url = new URL(
		`http://${process.env["HOST"] ?? "localhost"}${request.url}`,
	);

	if (routeHandlers.has(url.pathname)) {
		const handler = routeHandlers.get(url.pathname);
		if (handler) {
			const { headers, body } = await handler(request, response);
			Object.entries(headers).forEach(([key, value]) => {
				response.setHeader(key, value);
			});
			response.end(body);
			return;
		}
	}


	response.statusCode = 404;
	response.end("Not found");
}



const UserAccounts = [
	{
		username: "new",
		ticket: "5213dee3a6bcdb133373b2d4f3b9962758",
		password: "new",
		customerId: "123456",
	},
	{
		username: "admin",
		ticket: "d316cd2dd6bf870893dfbaaf17f965884e",
		password: "admin",
		customerId: "654321",
	},
];

const AuthTickets = [
	{
		ticket: "5213dee3a6bcdb133373b2d4f3b9962758",
		customerId: 123456,
	},
	{
		ticket: "d316cd2dd6bf870893dfbaaf17f965884e",
		customerId: 654321,
	},
];

/**
 * Generates a ticket for the given customer ID.
 *
 * @param customerId - The ID of the customer for whom the ticket is being generated.
 * @returns The ticket associated with the given customer ID, or an empty string if no ticket is found.
 */
function generateTicket(customerId: number): string {
	const ticket = AuthTickets.find((t) => t.customerId === customerId);
	if (ticket) {
		return ticket.ticket;
	}
	return "";
}

